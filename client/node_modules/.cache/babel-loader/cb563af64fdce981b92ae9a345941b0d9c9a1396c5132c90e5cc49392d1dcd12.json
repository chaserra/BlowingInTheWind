{"ast":null,"code":"'use strict';\n\nvar shared = require('../internals/shared');\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isSymbol = require('../internals/is-symbol');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar Symbol = getBuiltIn('Symbol');\nvar $isWellKnownSymbol = Symbol.isWellKnownSymbol;\nvar getOwnPropertyNames = getBuiltIn('Object', 'getOwnPropertyNames');\nvar thisSymbolValue = uncurryThis(Symbol.prototype.valueOf);\nvar WellKnownSymbolsStore = shared('wks');\nfor (var i = 0, symbolKeys = getOwnPropertyNames(Symbol), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\n  // some old engines throws on access to some keys like `arguments` or `caller`\n  try {\n    var symbolKey = symbolKeys[i];\n    if (isSymbol(Symbol[symbolKey])) wellKnownSymbol(symbolKey);\n  } catch (error) {/* empty */}\n}\n\n// `Symbol.isWellKnownSymbol` method\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\nmodule.exports = function isWellKnownSymbol(value) {\n  if ($isWellKnownSymbol && $isWellKnownSymbol(value)) return true;\n  try {\n    var symbol = thisSymbolValue(value);\n    for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\n      // eslint-disable-next-line eqeqeq -- polyfilled symbols case\n      if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\n    }\n  } catch (error) {/* empty */}\n  return false;\n};","map":{"version":3,"names":["shared","require","getBuiltIn","uncurryThis","isSymbol","wellKnownSymbol","Symbol","$isWellKnownSymbol","isWellKnownSymbol","getOwnPropertyNames","thisSymbolValue","prototype","valueOf","WellKnownSymbolsStore","i","symbolKeys","symbolKeysLength","length","symbolKey","error","module","exports","value","symbol","j","keys","keysLength"],"sources":["C:/Users/ernes/OneDrive/Documents/COMPX241 Labs/COMPX241 - Blowing in the wind/BlowingInTheWind/client/node_modules/core-js-pure/internals/symbol-is-well-known.js"],"sourcesContent":["'use strict';\r\nvar shared = require('../internals/shared');\r\nvar getBuiltIn = require('../internals/get-built-in');\r\nvar uncurryThis = require('../internals/function-uncurry-this');\r\nvar isSymbol = require('../internals/is-symbol');\r\nvar wellKnownSymbol = require('../internals/well-known-symbol');\r\n\r\nvar Symbol = getBuiltIn('Symbol');\r\nvar $isWellKnownSymbol = Symbol.isWellKnownSymbol;\r\nvar getOwnPropertyNames = getBuiltIn('Object', 'getOwnPropertyNames');\r\nvar thisSymbolValue = uncurryThis(Symbol.prototype.valueOf);\r\nvar WellKnownSymbolsStore = shared('wks');\r\n\r\nfor (var i = 0, symbolKeys = getOwnPropertyNames(Symbol), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {\r\n  // some old engines throws on access to some keys like `arguments` or `caller`\r\n  try {\r\n    var symbolKey = symbolKeys[i];\r\n    if (isSymbol(Symbol[symbolKey])) wellKnownSymbol(symbolKey);\r\n  } catch (error) { /* empty */ }\r\n}\r\n\r\n// `Symbol.isWellKnownSymbol` method\r\n// https://tc39.es/proposal-symbol-predicates/#sec-symbol-iswellknownsymbol\r\n// We should patch it for newly added well-known symbols. If it's not required, this module just will not be injected\r\nmodule.exports = function isWellKnownSymbol(value) {\r\n  if ($isWellKnownSymbol && $isWellKnownSymbol(value)) return true;\r\n  try {\r\n    var symbol = thisSymbolValue(value);\r\n    for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {\r\n      // eslint-disable-next-line eqeqeq -- polyfilled symbols case\r\n      if (WellKnownSymbolsStore[keys[j]] == symbol) return true;\r\n    }\r\n  } catch (error) { /* empty */ }\r\n  return false;\r\n};\r\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC3C,IAAIC,UAAU,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACrD,IAAIE,WAAW,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AAC/D,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAII,eAAe,GAAGJ,OAAO,CAAC,gCAAgC,CAAC;AAE/D,IAAIK,MAAM,GAAGJ,UAAU,CAAC,QAAQ,CAAC;AACjC,IAAIK,kBAAkB,GAAGD,MAAM,CAACE,iBAAiB;AACjD,IAAIC,mBAAmB,GAAGP,UAAU,CAAC,QAAQ,EAAE,qBAAqB,CAAC;AACrE,IAAIQ,eAAe,GAAGP,WAAW,CAACG,MAAM,CAACK,SAAS,CAACC,OAAO,CAAC;AAC3D,IAAIC,qBAAqB,GAAGb,MAAM,CAAC,KAAK,CAAC;AAEzC,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEC,UAAU,GAAGN,mBAAmB,CAACH,MAAM,CAAC,EAAEU,gBAAgB,GAAGD,UAAU,CAACE,MAAM,EAAEH,CAAC,GAAGE,gBAAgB,EAAEF,CAAC,EAAE,EAAE;EACzH;EACA,IAAI;IACF,IAAII,SAAS,GAAGH,UAAU,CAACD,CAAC,CAAC;IAC7B,IAAIV,QAAQ,CAACE,MAAM,CAACY,SAAS,CAAC,CAAC,EAAEb,eAAe,CAACa,SAAS,CAAC;EAC7D,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAE;AACpB;;AAEA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASb,iBAAiBA,CAACc,KAAK,EAAE;EACjD,IAAIf,kBAAkB,IAAIA,kBAAkB,CAACe,KAAK,CAAC,EAAE,OAAO,IAAI;EAChE,IAAI;IACF,IAAIC,MAAM,GAAGb,eAAe,CAACY,KAAK,CAAC;IACnC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEC,IAAI,GAAGhB,mBAAmB,CAACI,qBAAqB,CAAC,EAAEa,UAAU,GAAGD,IAAI,CAACR,MAAM,EAAEO,CAAC,GAAGE,UAAU,EAAEF,CAAC,EAAE,EAAE;MAChH;MACA,IAAIX,qBAAqB,CAACY,IAAI,CAACD,CAAC,CAAC,CAAC,IAAID,MAAM,EAAE,OAAO,IAAI;IAC3D;EACF,CAAC,CAAC,OAAOJ,KAAK,EAAE,CAAE;EAClB,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}