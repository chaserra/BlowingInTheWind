{"ast":null,"code":"'use strict';\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return {\n        done: !!called++\n      };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () {\n    throw 2;\n  });\n} catch (error) {/* empty */}\nmodule.exports = function (exec, SKIP_CLOSING) {\n  try {\n    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  } catch (error) {\n    return false;\n  } // workaround of old WebKit + `eval` bug\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return {\n            done: ITERATION_SUPPORT = true\n          };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) {/* empty */}\n  return ITERATION_SUPPORT;\n};","map":{"version":3,"names":["wellKnownSymbol","require","ITERATOR","SAFE_CLOSING","called","iteratorWithReturn","next","done","return","Array","from","error","module","exports","exec","SKIP_CLOSING","ITERATION_SUPPORT","object"],"sources":["C:/Users/ernes/OneDrive/Documents/COMPX241 Labs/COMPX241 - Blowing in the wind/BlowingInTheWind/client/node_modules/core-js-pure/internals/check-correctness-of-iteration.js"],"sourcesContent":["'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var called = 0;\n  var iteratorWithReturn = {\n    next: function () {\n      return { done: !!called++ };\n    },\n    'return': function () {\n      SAFE_CLOSING = true;\n    }\n  };\n  iteratorWithReturn[ITERATOR] = function () {\n    return this;\n  };\n  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing\n  Array.from(iteratorWithReturn, function () { throw 2; });\n} catch (error) { /* empty */ }\n\nmodule.exports = function (exec, SKIP_CLOSING) {\n  try {\n    if (!SKIP_CLOSING && !SAFE_CLOSING) return false;\n  } catch (error) { return false; } // workaround of old WebKit + `eval` bug\n  var ITERATION_SUPPORT = false;\n  try {\n    var object = {};\n    object[ITERATOR] = function () {\n      return {\n        next: function () {\n          return { done: ITERATION_SUPPORT = true };\n        }\n      };\n    };\n    exec(object);\n  } catch (error) { /* empty */ }\n  return ITERATION_SUPPORT;\n};\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAGC,OAAO,CAAC,gCAAgC,CAAC;AAE/D,IAAIC,QAAQ,GAAGF,eAAe,CAAC,UAAU,CAAC;AAC1C,IAAIG,YAAY,GAAG,KAAK;AAExB,IAAI;EACF,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,kBAAkB,GAAG;IACvBC,IAAI,EAAE,SAAAA,CAAA,EAAY;MAChB,OAAO;QAAEC,IAAI,EAAE,CAAC,CAACH,MAAM;MAAG,CAAC;IAC7B,CAAC;IACD,QAAQ,EAAE,SAAAI,CAAA,EAAY;MACpBL,YAAY,GAAG,IAAI;IACrB;EACF,CAAC;EACDE,kBAAkB,CAACH,QAAQ,CAAC,GAAG,YAAY;IACzC,OAAO,IAAI;EACb,CAAC;EACD;EACAO,KAAK,CAACC,IAAI,CAACL,kBAAkB,EAAE,YAAY;IAAE,MAAM,CAAC;EAAE,CAAC,CAAC;AAC1D,CAAC,CAAC,OAAOM,KAAK,EAAE,CAAE;AAElBC,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAEC,YAAY,EAAE;EAC7C,IAAI;IACF,IAAI,CAACA,YAAY,IAAI,CAACZ,YAAY,EAAE,OAAO,KAAK;EAClD,CAAC,CAAC,OAAOQ,KAAK,EAAE;IAAE,OAAO,KAAK;EAAE,CAAC,CAAC;EAClC,IAAIK,iBAAiB,GAAG,KAAK;EAC7B,IAAI;IACF,IAAIC,MAAM,GAAG,CAAC,CAAC;IACfA,MAAM,CAACf,QAAQ,CAAC,GAAG,YAAY;MAC7B,OAAO;QACLI,IAAI,EAAE,SAAAA,CAAA,EAAY;UAChB,OAAO;YAAEC,IAAI,EAAES,iBAAiB,GAAG;UAAK,CAAC;QAC3C;MACF,CAAC;IACH,CAAC;IACDF,IAAI,CAACG,MAAM,CAAC;EACd,CAAC,CAAC,OAAON,KAAK,EAAE,CAAE;EAClB,OAAOK,iBAAiB;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}